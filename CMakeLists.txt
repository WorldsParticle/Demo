#
# \file CMakeList.txt
#
# \brief CMakeList used to generate a default project.
#
# \author Louis Martin-Pierrat
#
# \version 2.0.2
#
# \date September 30, 2015
#

## CMAKE INITIALISATION

PROJECT(DEFAULT_PROJECT)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake/cmake_modules)

## END CMAKE INITIALISATION



## PROJECT VERSION

SET(PROJECT_VERSION_MAJOR 1)
SET(PROJECT_VERSION_MINOR 0)
SET(PROJECT_VERSION_PATCH 0)
SET(PROJECT_VERSION_EXTRA 0)

SET(PROJECT_VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
SET(PROJECT_VERSION_FULL ${PROJECT_VERSION}.${PROJECT_VERSION_EXTRA})

## END PROJECT VERSION



## PROJECT CONFIGURATION

SET(PROJECT_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include/${CMAKE_PROJECT_NAME})
SET(PROJECT_SOURCE_DIR ${CMAKE_SOURCE_DIR}/source/)

CONFIGURE_FILE(
    ${PROJECT_INCLUDE_DIR}/Version.hpp.in
    ${PROJECT_INCLUDE_DIR}/Version.hpp
    )

## END PROJECT CONFIGURATION



## FIND LIBRARY DEPENDENCY

#FIND_PACKAGE(GTest REQUIRED)

##



## PROJECT LANGUAGE

ENABLE_LANGUAGE(CXX)

## END PROJECT LANGUAGE



## PROJECT SOURCES FILES

SET(PROJECT_SOURCE_FILES
    ${PROJECT_SOURCE_DIR}/Application.cpp
    )

## END PROJECT SOURCES FILES



## PROJECT INCLUDES FILES

SET(PROJECT_INCLUDE_FILES
    ${PROJECT_INCLUDE_DIR}/Application.hpp
    ${PROJECT_INCLUDE_DIR}/Version.hpp
    )

## END PROJECT INCLUDES FILES



## PROJECT INCUDES DIRECTORIES

SET(PROJECT_INCLUDE_DIRECTORIES
    ${CMAKE_SOURCE_DIR}/include/
    )

INCLUDE_DIRECTORIES(${PROJECT_INCLUDE_DIRECTORIES})

## PROJCET INCLUDES DIRECTORIES



## PROJECT SETTINGS

IF (CMAKE_BUILD_TYPE MATCHES "debug")

    SET(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG} -D__DEBUG__)
    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/build/debug/)

ELSE ()

    SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/build/release/)

ENDIF ()

## END PROJECT SETTINGS



## COMPILATION SETTINGS

#if (WIN32)
    #if (MSVC)
    #elseif(CMAKE_COMPILER_IS_GNUCXX)
    ## SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mwindows")
    ## # Not tested
    #else()
    #message(SEND_ERROR "You are using an
    #unsupported Windows compiler! (Not MSVC or GCC)")
    #endif()
#elseif (UNIX)
    #set(CMAKE_PREFIX_PATH "/usr/lib64/qt5")
    SET(CMAKE_CXX_FLAGS "-std=c++14 -W -Wall -Wextra")
#else ()
    #message(SEND_ERROR "You are on an unsupported platform! (Not Win32 or Unix)")
#ENDIF ()

## END COMPILATION SETTINGS



## BINARY SETTINGS

ADD_LIBRARY(SOURCES ${PROJECT_SOURCE_FILES})
ADD_EXECUTABLE(${CMAKE_PROJECT_NAME} ${PROJECT_SOURCE_DIR}/main.cpp)

## END BINARY SETTINGS



## LIBRARY SETTINGS

TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} SOURCES)

## END LIBRARY SETTINGS



## INSTALLATION SETTINGS

INSTALL(TARGETS ${CMAKE_PROJECT_NAME}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)

## END INSTALLATION SETTINGS



## DOXYGEN CONFIGURATION

FIND_PACKAGE(Doxygen)

IF (DOXYGEN_FOUND)

    CONFIGURE_FILE(
        ${CMAKE_SOURCE_DIR}/Doxyfile.in
        ${CMAKE_BINARY_DIR}/Doxyfile
        @ONLY)

    ADD_CUSTOM_TARGET(doc
        ${DOXYGEN_EXECUTABLE} ${CMAKE_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/sources
        COMMENT "Generating API documentation with Doxygen" VERBATIM
        )

ENDIF (DOXYGEN_FOUND)

## END DOXYGEN CONFIGURATION

